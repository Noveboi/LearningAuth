@page "/"
@inject HttpClient HttpClient
@inject AuthService Authentication
@inject ILocalStorageService LocalStorage

@using Blazored.LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Net.Http
@using LearningAuth.Client.Authentication

<EditForm Model="_user" OnValidSubmit="SubmitCredentials">
	<label>Username</label>
	<InputText @bind-Value="_user.Username" />
	<label>Password</label>
	<InputText type="password" @bind-Value="_user.Password"/>
	<InputText type="hidden" @bind-Value="_user.Email"/>
	<label> Remember Me</label>
	<InputCheckbox @bind-Value="_rememberUserAuth" />
	<button type="submit">Login</button>
	<DataAnnotationsValidator />
	<ValidationSummary />
</EditForm>

<h1>@_messageFromAbove</h1>

<button @onclick="SendGetPerson">Get Person</button>
@if (_person != null)
{
	<h1 style="@(_person.FirstName == "Maraki" && _person.LastName == "Dimitroulaki" ? "color: purple;" : "")">@_person.FirstName @(_person.LastName), Age @_person.Age</h1>
}
<br />
<h1 >@_personMessage</h1>

@code {
	UserModel _user = default!;
	PersonModel? _person;
	string _messageFromAbove = string.Empty;
	string _personMessage = string.Empty;

	bool _rememberUserAuth = false;

	protected override async Task OnInitializedAsync() 
	{
		_user ??= new() { Email = "nove@nove.gr" };

		var jwtToken = await LocalStorage.GetItemAsStringAsync("jwtToken");
		if (jwtToken != null)
		{
			Authentication.JwtToken = jwtToken;
		}
	}

	// Invoked when user clicks "Login" button
	async Task SubmitCredentials()
	{
		// Send username and password to API and receive a message from the HTTP Response Body and a cookie from the HTTP Response Header.
		using var response = await HttpClient.PostAsJsonAsync("/login", _user);
		string content = await response.Content.ReadAsStringAsync();

		Authentication.JwtToken = content;

		if (_rememberUserAuth)
		{
			await LocalStorage.SetItemAsStringAsync("jwtToken", content);
		}

		_messageFromAbove = $"{content} ({response.StatusCode})";
	}

	private async Task SendGetPerson()
	{
		// Create an HTTP request and append a 'Cookie' header with the auth cookie as the value.
		HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "person/get");

		request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Authentication.JwtToken);

		using var response = await HttpClient.SendAsync(request);

		if (response.IsSuccessStatusCode)
		{
			_person = await response.Content.ReadFromJsonAsync<PersonModel>();
		}
		else
		{
			_personMessage = await response.Content.ReadAsStringAsync();
		}
	}
}