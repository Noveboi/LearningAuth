@inject LoginService LoginService

<EditForm Model="_user" OnValidSubmit="SubmitCredentials" class="d-flex justify-content-center">
	<div class="d-flex flex-column align-items-start">
		<div class="form-field">
			<label>Username</label>
			<InputText @bind-Value="_user.Username" />
		</div>
		<div class="form-field">
			<label>Password</label>
			<InputText type="password" @bind-Value="_user.Password" />
		</div>
		<div class="remember-me">
			<label> Remember Me</label>
			<InputCheckbox @bind-Value="_rememberUser" />
		</div>
		<div class="loader @(_loaderStyle) align-self-center" />
		<button type="submit" class="btn btn-primary align-self-center @(_loginButtonStyle)">Login</button>
		<DataAnnotationsValidator />
		<ValidationSummary />
	</div>
</EditForm>
<h3 class="@(_confirmMessageStyle) align-self-center">@LoginService.LoginMessage</h3>

@code {
	UserLoginModel _user = default!;

	const string displayNone = "set-display-none";

	bool _rememberUser = false;
	string _loginButtonStyle = string.Empty;
	string _confirmMessageStyle = displayNone;
	string _loaderStyle = displayNone;

	protected override async Task OnInitializedAsync() 
	{
		_user ??= new();
		await LoginService.TryGetAuthToken();
	}

	async Task SubmitCredentials() 
	{
		_loginButtonStyle = displayNone;
		_loaderStyle = string.Empty;
		await LoginService.Login(_user, _rememberUser);
		_loaderStyle = displayNone;
		_confirmMessageStyle = string.Empty;
	}
}
