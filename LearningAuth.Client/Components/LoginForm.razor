@inject LoginService LoginService

<EditForm Model="_userModel" OnValidSubmit="SubmitCredentials" class="d-flex flex-column align-items-center">
	<h1 class="mb-3 text-center">Login</h1>
	<div class="d-flex flex-column align-items-start">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-field">
			<label>Username</label>
			<InputText @bind-Value="_userModel.Username" />
		</div>
		<div class="form-field">
			<label>Password</label>
			<InputText type="password" @bind-Value="_userModel.Password" />
		</div>
		<div class="remember-me">
			<label><strong>Remember Me</strong></label>
			<InputCheckbox @bind-Value="_rememberUser" />
		</div>
		<div class="loader @(_loaderStyle) align-self-center" />
		<button type="submit" class="btn btn-primary align-self-center @(_loginButtonStyle)">Login</button>
		<p>Don't have an account? <span class="switch-form-text" @onclick="SwitchForm">Register</span></p>
	</div>
</EditForm>
<h3 class="@(_loginMessageStyle) text-align-center">@LoginService.LoginMessage</h3>

@code {
	[Parameter]
	public EventCallback OnSuccessfulLogin { get; set; }
	[Parameter]
	public EventCallback OnRequestRegisterForm { get; set; }

	UserLoginModel _userModel = default!;

	const string displayNone = "set-display-none";

	bool _rememberUser = false;

	// Variables for showing/hiding certain HTML elements
	string _loginButtonStyle = string.Empty;
	string _loginMessageStyle = displayNone;
	string _loaderStyle = displayNone;

	protected override async Task OnInitializedAsync() 
	{
		_userModel ??= new();
		await LoginService.TryGetAuthToken();
	}

	async Task SubmitCredentials() 
	{
		_loaderStyle = string.Empty;

		bool userLoginSuccess = await LoginService.LoginAsync(_userModel, _rememberUser);

		if (userLoginSuccess)
		{
			await OnSuccessfulLogin.InvokeAsync();
		}

		_loaderStyle = displayNone;
		_loginMessageStyle = string.Empty;
	}

	async Task SwitchForm() => await OnRequestRegisterForm.InvokeAsync();
}
